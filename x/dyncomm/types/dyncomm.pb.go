// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: terra/dyncomm/v1beta1/dyncomm.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Params defines the parameters for the dyncomm module.
type Params struct {
	MaxZero       github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,1,opt,name=max_zero,json=maxZero,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"max_zero" yaml:"max_zero"`
	SlopeBase     github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=slope_base,json=slopeBase,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"slope_base" yaml:"slope_base"`
	SlopeVpImpact github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,3,opt,name=slope_vp_impact,json=slopeVpImpact,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"slope_vp_impact" yaml:"slope_vp_impact"`
	Cap           github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,4,opt,name=cap,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"cap" yaml:"cap"`
}

func (m *Params) Reset()      { *m = Params{} }
func (*Params) ProtoMessage() {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_960758a428b59bad, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Params)(nil), "terra.dyncomm.v1beta1.Params")
}

func init() {
	proto.RegisterFile("terra/dyncomm/v1beta1/dyncomm.proto", fileDescriptor_960758a428b59bad)
}

var fileDescriptor_960758a428b59bad = []byte{
	// 360 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0xd2, 0x3f, 0x4f, 0xfa, 0x40,
	0x18, 0x07, 0xf0, 0xf6, 0xc7, 0x2f, 0x08, 0x97, 0x18, 0x62, 0xa3, 0xa6, 0x32, 0xb4, 0x06, 0x13,
	0xe3, 0x42, 0x2b, 0xba, 0x31, 0x12, 0x16, 0x59, 0xfc, 0x33, 0x30, 0x10, 0x93, 0xe6, 0xe9, 0x71,
	0x41, 0x94, 0xf3, 0x2e, 0x77, 0x27, 0x01, 0x07, 0x5f, 0x83, 0xa3, 0x23, 0x2f, 0xc2, 0x17, 0xc1,
	0x64, 0x88, 0x93, 0x71, 0x20, 0x06, 0x16, 0x67, 0x5f, 0x81, 0xe1, 0xae, 0x20, 0x61, 0x63, 0x6a,
	0x9f, 0x3f, 0xfd, 0x7e, 0x3a, 0x3c, 0xe8, 0x40, 0x11, 0x21, 0x20, 0x6c, 0xf6, 0xef, 0x31, 0xa3,
	0x34, 0xec, 0x96, 0x62, 0xa2, 0xa0, 0x34, 0xaf, 0x03, 0x2e, 0x98, 0x62, 0xce, 0x8e, 0x5e, 0x0a,
	0xe6, 0xcd, 0x64, 0x29, 0xbf, 0x87, 0x99, 0xa4, 0x4c, 0x46, 0x7a, 0x29, 0x34, 0x85, 0xf9, 0x22,
	0xbf, 0xdd, 0x62, 0x2d, 0x66, 0xfa, 0xb3, 0x37, 0xd3, 0x2d, 0xbc, 0xa5, 0x50, 0xfa, 0x02, 0x04,
	0x50, 0xe9, 0xdc, 0xa2, 0x0c, 0x85, 0x5e, 0xf4, 0x48, 0x04, 0x73, 0xed, 0x7d, 0xfb, 0x28, 0x5b,
	0x39, 0x1f, 0x8e, 0x7d, 0xeb, 0x73, 0xec, 0x1f, 0xb6, 0xda, 0xea, 0xe6, 0x21, 0x0e, 0x30, 0xa3,
	0x49, 0x66, 0xf2, 0x28, 0xca, 0xe6, 0x5d, 0xa8, 0xfa, 0x9c, 0xc8, 0xa0, 0x4a, 0xf0, 0xcf, 0xd8,
	0xcf, 0xf5, 0x81, 0x76, 0xca, 0x85, 0x79, 0x4e, 0xe1, 0xfd, 0xb5, 0x88, 0x92, 0xbf, 0xa8, 0x12,
	0x7c, 0xb5, 0x41, 0xa1, 0xd7, 0x20, 0x82, 0x39, 0x1c, 0x21, 0xd9, 0x61, 0x9c, 0x44, 0x31, 0x48,
	0xe2, 0xfe, 0xd3, 0xda, 0xe5, 0xda, 0xda, 0x96, 0xd1, 0xfe, 0x92, 0x56, 0xbd, 0xac, 0x1e, 0x55,
	0x40, 0x12, 0xe7, 0x09, 0xe5, 0xcc, 0x5e, 0x97, 0x47, 0x6d, 0xca, 0x01, 0x2b, 0x37, 0xa5, 0xd9,
	0xfa, 0xda, 0xec, 0xee, 0x32, 0xbb, 0x88, 0x5b, 0xb5, 0x37, 0xf5, 0xbc, 0xce, 0xcf, 0xf4, 0xd4,
	0xb9, 0x46, 0x29, 0x0c, 0xdc, 0xfd, 0xaf, 0xcd, 0xda, 0xda, 0x26, 0x32, 0x26, 0x06, 0xbe, 0xea,
	0xcc, 0x62, 0xcb, 0x99, 0x97, 0x81, 0x6f, 0x7d, 0x0f, 0x7c, 0xbb, 0x52, 0x1b, 0x4e, 0x3c, 0x7b,
	0x34, 0xf1, 0xec, 0xaf, 0x89, 0x67, 0x3f, 0x4f, 0x3d, 0x6b, 0x34, 0xf5, 0xac, 0x8f, 0xa9, 0x67,
	0x35, 0x8e, 0x97, 0xb1, 0x0e, 0x48, 0xd9, 0xc6, 0x45, 0x73, 0x6a, 0x98, 0x09, 0x12, 0x76, 0x4f,
	0xc2, 0xde, 0xe2, 0xe8, 0x34, 0x1d, 0xa7, 0xf5, 0x8d, 0x9c, 0xfe, 0x06, 0x00, 0x00, 0xff, 0xff,
	0xba, 0xc8, 0xe1, 0x81, 0x92, 0x02, 0x00, 0x00,
}

func (this *Params) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Params)
	if !ok {
		that2, ok := that.(Params)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.MaxZero.Equal(that1.MaxZero) {
		return false
	}
	if !this.SlopeBase.Equal(that1.SlopeBase) {
		return false
	}
	if !this.SlopeVpImpact.Equal(that1.SlopeVpImpact) {
		return false
	}
	if !this.Cap.Equal(that1.Cap) {
		return false
	}
	return true
}
func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Cap.Size()
		i -= size
		if _, err := m.Cap.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintDyncomm(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.SlopeVpImpact.Size()
		i -= size
		if _, err := m.SlopeVpImpact.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintDyncomm(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.SlopeBase.Size()
		i -= size
		if _, err := m.SlopeBase.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintDyncomm(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.MaxZero.Size()
		i -= size
		if _, err := m.MaxZero.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintDyncomm(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintDyncomm(dAtA []byte, offset int, v uint64) int {
	offset -= sovDyncomm(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.MaxZero.Size()
	n += 1 + l + sovDyncomm(uint64(l))
	l = m.SlopeBase.Size()
	n += 1 + l + sovDyncomm(uint64(l))
	l = m.SlopeVpImpact.Size()
	n += 1 + l + sovDyncomm(uint64(l))
	l = m.Cap.Size()
	n += 1 + l + sovDyncomm(uint64(l))
	return n
}

func sovDyncomm(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDyncomm(x uint64) (n int) {
	return sovDyncomm(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDyncomm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxZero", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDyncomm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDyncomm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDyncomm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MaxZero.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlopeBase", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDyncomm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDyncomm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDyncomm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SlopeBase.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlopeVpImpact", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDyncomm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDyncomm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDyncomm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SlopeVpImpact.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cap", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDyncomm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDyncomm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDyncomm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Cap.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDyncomm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDyncomm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDyncomm(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDyncomm
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDyncomm
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDyncomm
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDyncomm
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDyncomm
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDyncomm
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDyncomm        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDyncomm          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDyncomm = fmt.Errorf("proto: unexpected end of group")
)
